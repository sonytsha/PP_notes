// table of numbers
// 1 2 3
// 0 1 2
// 4 6 3
// 1 1 2
// 4 x 3
// matrix : m x n : mn
// int arr[m*n] ;
// helps us to access/ modify with the element at ith row and jth column in super easy way
// 2-d structure
// array of array ===> 2-d array
// datatype name_of_array[num_rows][num_columns]
// 0,0 | 0,1 |, 0,2
// 1,0| 1,1| 1,2
// 2,0| 2,1,|,2,2
// 3,0| 3,1 |3,2
// nums[2][2]
// nums[i][j] : int
// nums[i] : 1-d array
// nums : 2-d array


#include<stdio.h>
int main() {
int nums[4][3];
int j;
for ( j=0; j<3;j++) {
scanf("%d", &nums[0][j]);
}
for ( j=0; j<3;j++) {
scanf("%d", &nums[1][j]);
}
for ( j=0; j<3;j++) {
scanf("%d", &nums[2][j]);
}
for ( j=0; j<3;j++) {
scanf("%d", &nums[3][j]);
}



for ( j=0; j<3;j++) {
printf("%d ", nums[0][j]);
}
printf("\n");
for ( j=0; j<3;j++) {
printf("%d ", nums[1][j]);
}
printf("\n");
for ( j=0; j<3;j++) {
printf("%d ", nums[2][j]);
}
printf("\n");
for ( j=0; j<3;j++) {
printf("%d ", nums[3][j]);
}
printf("\n");

return 0;
}


IMPROVED CODE : 

#include<stdio.h>
int main() {
int nums[4][3];
int i,j;
for(i=0;i<4;i++) {
for (j=0;j<3;j++) {
scanf("%d", &nums[i][j]);
}
}
printf("###########################\n");
for(i=0;i<4;i++){
for(j=0;j<3;j++) {
printf("%d ", nums[i][j]);
}
printf("\n");
}
printf("\n");
return 0;
}








