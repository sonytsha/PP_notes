In this lecture, we will learn how to rotate an array by ‘k’ units clockwise using different methods.

Input: Arr[6] = { 1, 2, 3, 4, 5, 6 }, k = 3
O: Arr[6] = { 4, 5, 6, 1, 2, 3 }


Approach:

Brute Force - Rotate the array clockwise by 1 unit and repeat the steps ‘k’ times.
Time complexity: O(kN)
Space complexity: O(1)

Using a temporary array - We can create a temporary array and store the elements at their new position after rotation.
Using Array Reversal


Changed positions
Time complexity: O(N)
Space complexity: O(N) 

3.  Using Array Reversal - 

Input: Arr[5] = { 1 7 3 4 5 }, k = 3

Output: Arr[5] = [ 3 4 5 1 7 ]

[ 1 7 3 4 5 ] → [ 3 4 5 1 7 ] 

We can divide the array into two subarrays of length N-k and k. Now, if we carefully look at the reverse of the two subarrays - 

reverse of [ 1 7 ] → [ 7 1 ]

reverse of [ 3 4 5 ] → [ 5 4 3 ] 

Combining the above two reversed sub-arrays, we get → [ 7 1 5 4 3 ]

And on reversing the above array, we get → [ 3 4 5 1 7 ], which is the desired output.

Note: The above method is based on the logic that an array if reversed twice yields the same array.


Time complexity: O(N)
Space complexity: O(1)

QUESTION : Rotate Array
markAsDonemarkForRevisionmarkForLater
You are given an integer array 
A
r
r
 of length 
N
 .

Rotate the array to the right by 
K
 steps, where K is non-negative.

Note: Try to solve it in 
O
(
1
)
 Space

Input Format

First line of input contains an two integers 
N
 and 
K
 respectively.
Second line of input contains 
N
 space separated integers 
a
1
, 
a
2
, 
a
3
...., 
a
n
.
Output Format

Output the final array after rotate it by 
K
 steps .
Constraints:

1
 
≤
 
N
 
≤
 
10
5

−
10
9
 
≤
 
a
[
i
]
 
≤
 
10
9

1
 
≤
 
K
 
≤
 
10
5

Sample Input 0

7 3

1 2 3 4 5 6 7

Sample Output 0

5 6 7 1 2 3 4

Explanation

rotate 1 steps to the right: [7, 1, 2, 3, 4, 5, 6]
rotate 2 steps to the right: [6, 7, 1, 2, 3, 4, 5]
rotate 3 steps to the right: [5, 6, 7, 1, 2, 3, 4].
Example
Input
7 3
1 2 3 4 5 6 7
Output
5 6 7 1 2 3 4

CODE : 

1) 1ST APPROACH : Time Complexity: O(N * K)
Space Complexity: O(N)

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] arr = new int[N];

        for (int i = 0; i < N; i++) {
            arr[i] = sc.nextInt();
        }

        for (int j = 0; j < K; j++) {
            int x = arr[N - 1];
            for (int i = N - 2; i >= 0; i--) {
                arr[i + 1] = arr[i];
            }
            arr[0] = x;
        }

        for (int i = 0; i < N; i++) {
            System.out.print(arr[i] + " ");
        }
    }
}

2) 2ND APPROACH : Time Complexity: O(N^2)
Space Complexity: O(N)

// JUST REPLACE THE J LOOP TILL N % K
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] arr = new int[N];

        for (int i = 0; i < N; i++) {
            arr[i] = sc.nextInt();
        }

        for (int j = 0; j < K % N; j++) {
            int x = arr[N - 1];
            for (int i = N - 2; i >= 0; i--) {
                arr[i + 1] = arr[i];
            }
            arr[0] = x;
        }

        for (int i = 0; i < N ; i++) {
            System.out.print(arr[i] + " ");
        }
    }
}

3) 3RD APPROACH : 
Time Complexity: O(N)
Space Complexity: O(1)

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] arr = new int[N];

        for (int i = 0; i < N; i++) {
            arr[i] = sc.nextInt();
        }

        // Normalize rotations
        K = K % N;
        if (K < 0) {
            K += N;
        }

        // Reverse the entire array
        reverse(arr, 0, N - 1);

        // Reverse the first K elements
        reverse(arr, 0, K - 1);

        // Reverse the remaining elements
        reverse(arr, K, N - 1);

        // Print the rotated array
        for (int i = 0; i < N; i++) {
            System.out.print(arr[i] + " ");
        }
    }

    // Helper function to reverse the elements of an array within a given range
    private static void reverse(int[] arr, int start, int end) {
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
}

